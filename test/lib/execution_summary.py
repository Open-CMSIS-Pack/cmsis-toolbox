# This script is designed to process the output.xml file generated by Robot
# Framework, extract the test statuses, and create a markdown file based
# on the parsed information.
# 
# execution_summary.py <path to input output.xml> [output file summary.md]

import os
import re
import shutil
import subprocess
import sys
from robot.api import ExecutionResult, ResultVisitor
from robot.result.model import TestCase
from robot.result.executionresult import Result 

class ResultVisitorEx(ResultVisitor):
    def __init__(self, markdown_file='summary_report.md'):
        self.failed_tests = {}
        self.passed_tests = {}
        self.skipped_tests = {}
        self.markdown_file = markdown_file

        # Remove existing markdown file if it exists
        if os.path.exists(markdown_file):
            os.remove(markdown_file)

    def visit_test(self, test: TestCase):
        tags = ", ".join(test.tags)
        duration = "{:.2f} s".format(test.elapsed_time.total_seconds())
        status = (test.name, test.message, duration, test.parent.name)
        test_status = self.failed_tests if test.status == 'FAIL' else (
            self.passed_tests if test.status == 'PASS' else self.skipped_tests)
        if tags not in test_status:
            test_status[tags] = []
        test_status[tags].append(status)

    def end_result(self, result: Result):
        with open(self.markdown_file, "w") as f:
            f.write("# Robot Framework Report\n\n")
            f.write("## Summary\n\n")
            f.write("|:white_check_mark: Passed|:x: Failed|:fast_forward: Skipped|Total|\n")
            f.write("|:----:|:----:|:-----:|:---:|\n")
            f.write(f"|{result.statistics.total.passed}|{result.statistics.total.failed}|{result.statistics.total.skipped}|{result.statistics.total.total}|\n")
            self.__write_test_section(f, self.passed_tests, "Passed Tests", "|Tag|Test|:clock1030: Duration|Suite|\n")
            self.__write_test_section(f, self.failed_tests, "Failed Tests", "|Tag|Test|Message|:clock1030: Duration|Suite|\n")
            self.__write_test_section(f, self.skipped_tests, "Skipped Tests", "|Tag|Test|Suite|\n")

    def __write_test_section(self, file, test_dict, section_header, table_header):
        if len(test_dict) != 0:
            file.write(f"\n## {section_header}\n\n")
            file.write(table_header)
            tokens = table_header.split('|')
            table_sep = "|:-"
            num_req_sep = len(tokens) - 2
            for i in range(num_req_sep):
                table_sep += "--:|" 
                if i != (num_req_sep - 1):
                    table_sep += ":-" 
            file.write(table_sep + "\n")
            for key, value in test_dict.items():
                for name, msg, duration, suite in value:
                    if section_header.startswith("Pass"):
                        file.write(f"|{key}|{name}|{duration}|{suite}|\n")
                    elif section_header.startswith("Fail"):
                        file.write(f"|{key}|{name}|{msg}|{duration}|{suite}|\n")
                    elif section_header.startswith("Skip"):
                        file.write(f"|{key}|{name}|{suite}|\n")
               
if __name__ == '__main__':
    # Get output and markdown file paths from command line arguments
    output_file = sys.argv[1] if len(sys.argv) > 1 else "output.xml"
    markdown_file = sys.argv[2] if len(sys.argv) > 2 else "summary_report.md"
    
    # Parse the Robot Framework output file and generate the summary report
    result = ExecutionResult(output_file)
    result.visit(ResultVisitorEx(markdown_file))
